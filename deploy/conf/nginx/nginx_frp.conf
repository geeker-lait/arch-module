user  nginx;
worker_processes auto;        #nginx对外提供web服务时的worder进程数，可将其设置为可用的CPU内核数，auto为自动检测
worker_rlimit_nofile 100000;  # 更改worker进程的最大打开文件数限制

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
  worker_connections 2048;    #设置可由一个worker进程同时打开的最大连接数
  multi_accept on;            #设置nginx收到一个新连接通知后接受尽可能多的连接
  use epoll;                  #设置用于复用客户端线程的轮询方法。Linux 2.6+:使用epoll；*BSD:使用kqueue。
}

# 参考:  https://blog.csdn.net/qq_36595013/article/details/84141802
http {
  include       mime.types;
  default_type  application/octet-stream;

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
  '$status $body_bytes_sent "$http_referer" '
  '"$http_user_agent" "$http_x_forwarded_for"';

  access_log  /var/log/nginx/access.log  main;

  sendfile        on;   # 配置on让sendfile发挥作用，将文件的回写过程交给数据缓冲去去完成，而不是放在应用中完成，这样的话在性能提升有有好处
  tcp_nopush     on;    # 让nginx在一个数据包中发送所有的头文件，而不是一个一个单独发
  #tcp_nodelay on;      # 让nginx不要缓存数据，而是一段一段发送，如果数据的传输有实时性的要求的话可以配置它，发送完一小段数据就立刻能得到返回值，但是不要滥用哦

  keepalive_timeout  65;    # 给客户端分配连接超时时间，服务器会在这个时间过后关闭连接。一般设置时间较短，可以让nginx工作持续性更好
  client_header_timeout 10; # 设置请求头的超时时间
  client_body_timeout 10;   # 设置请求体的超时时间、
  send_timeout 10;          # 指定客户端响应超时时间，如果客户端两次操作间隔超过这个时间，服务器就会关闭这个链接

  #limit_conn_addr 100; # 给定的key设置最大连接数
  gzip  on;            # 开启nginx采用gzip压缩的形式发送数据。这将会减少我们发送的数据量

  upstream gitlab {
    server 192.168.1.199:80;
  }

  upstream jira {
    server 192.168.1.199:9087;
  }

  server {  #server模块，http服务上的虚拟主机， server 当做对应一个域名进行的配置
    charset utf-8;
    listen          7080;                # 配置监听端口
    server_name     192.168.1.199;       # 代表外网访问的域名

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
      root   /usr/share/nginx/html;
    }

    location / {
      root   /data/page;
      index  index.html index.htm;
      try_files $uri $uri/ /index.html;
    }

    location /gitlab {
      proxy_pass http://gitlab;
        proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header REMOTE-HOST $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location /jira {
      proxy_pass http://jira;
        proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header REMOTE-HOST $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
  }

  include /etc/nginx/conf.d/*.conf;
}
